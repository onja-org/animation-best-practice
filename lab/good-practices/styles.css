* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 2rem;
}

.container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.animation-card {
    background: white;
    border-radius: 15px;
    padding: 2rem;
    text-align: center;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

.animation-title {
    font-size: 1.5rem;
    color: #333;
    margin-bottom: 1rem;
}

.animation-description {
    color: #666;
    margin-bottom: 2rem;
    line-height: 1.5;
}

/* ✅ ANIMATION GOOD PRACTICE: Performance-optimized keyframes
 * WHY THIS ANIMATION IS WELL-DESIGNED:
 * - Only animates transform and opacity (GPU-accelerated properties)
 * - No layout recalculation or repainting required during animation
 * - Scale transform is handled by compositor, avoiding main thread work
 * - Smooth interpolation between keyframe values
 * - Returns to initial state cleanly (0% and 100% match)
 */
@keyframes pulse {
    0%, 100% {
        transform: scale(1);
        opacity: 1;
    }

    50% {
        transform: scale(1.1);
        opacity: 0.7;
    }
}

.spinner {
    width: 50px;
    height: 50px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    margin: 0 auto 1rem;
    /* ✅ ANIMATION GOOD PRACTICE: Optimal animation properties
     * - 1s duration: Fast enough for responsiveness, slow enough to perceive
     * - linear timing: Perfect for mechanical/loading animations (consistent speed)
     * - infinite iteration: Appropriate for loading states that run indefinitely
     */
    animation: spin 1s linear infinite;
}

/* ✅ ANIMATION GOOD PRACTICE: Single-property rotation animation
 * WHY THIS ROTATION IS EFFICIENT:
 * - Only animates transform: rotate (GPU-optimized)
 * - Simple 0° to 360° rotation is computationally lightweight
 * - No complex calculations or multiple properties changing
 * - Browser can predict and optimize this common animation pattern
 */
@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Thoughtful animation application
 * WHY THESE ANIMATION PROPERTIES WORK WELL:
 * - 1.5s duration allows users to perceive the pulsing pattern clearly
 * - ease-in-out timing creates natural, organic feeling motion
 * - infinite iteration makes sense for ongoing loading indicator
 * - Animation applies to simple, lightweight elements
 */
.pulse-dot {
    width: 20px;
    height: 20px;
    background: #e74c3c;
    border-radius: 50%;
    display: inline-block;
    margin: 0 5px;
    animation: pulse 1.5s ease-in-out infinite;
}

/* ✅ ANIMATION GOOD PRACTICE: Staggered timing for sequence effect
 * WHY ANIMATION DELAYS ARE EFFECTIVE HERE:
 * - 0.3s intervals create perceivable but not sluggish sequence
 * - Staggering prevents visual chaos of synchronized movement
 * - Creates pleasing wave-like pattern that draws attention appropriately
 * - Same base animation maintains consistency while adding variety
 */
.pulse-dot:nth-child(2) {
    animation-delay: 0.3s;
}

.pulse-dot:nth-child(3) {
    animation-delay: 0.6s;
}

/* ✅ ANIMATION GOOD PRACTICE: Multi-stage entrance animation
 * WHY THIS BOUNCE ANIMATION IS WELL-CRAFTED:
 * - Combines opacity fade-in with transform for rich entrance effect
 * - Multiple keyframe stops (0%, 50%, 70%, 100%) create complex but controlled motion
 * - Scale values create realistic bounce physics (0.3 → 1.1 → 0.9 → 1.0)
 * - translateY adds vertical movement that enhances bounce feeling
 * - Animation runs once (not infinitely) - appropriate for entrance effects
 */
@keyframes bounceIn {
    0% {
        opacity: 0;
        transform: scale(0.3) translateY(-50px);
    }

    50% {
        opacity: 1;
        transform: scale(1.1) translateY(0);
    }

    70% {
        transform: scale(0.9);
    }

    100% {
        opacity: 1;
        transform: scale(1);
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Subtle interaction feedback
 * WHY THIS WIGGLE ANIMATION IS EFFECTIVE:
 * - Small rotation values (-5° to +5°) create noticeable but not disorienting effect
 * - Short 0.5s duration provides immediate feedback without delaying interaction
 * - ease-in-out timing feels responsive and natural
 * - Returns cleanly to 0° rotation at start and end
 * - Triggered only on user interaction (hover), not continuously
 */
@keyframes wiggle {
    0%, 100% {
        transform: rotate(0deg);
    }

    25% {
        transform: rotate(-5deg);
    }

    75% {
        transform: rotate(5deg);
    }
}

.bounce-button {
    background: linear-gradient(45deg, #ff6b6b, #ee5a24);
    color: white;
    border: none;
    padding: 15px 30px;
    border-radius: 50px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    /* ✅ ANIMATION GOOD PRACTICE: One-time entrance animation
     * - 1s duration is substantial enough to feel intentional, not accidental
     * - ease-out timing starts fast then slows down (natural deceleration)
     * - Runs only once when element appears, doesn't repeat annoyingly
     */
    animation: bounceIn 1s ease-out;
    /* ✅ ANIMATION GOOD PRACTICE: Smooth hover transitions
     * - 0.2s transition duration is ideal for hover feedback (not too fast/slow)
     * - ease timing provides smooth acceleration and deceleration
     * - Only transitions transform property for performance
     */
    transition: transform 0.2s ease;
}

/* ✅ ANIMATION GOOD PRACTICE: Layered hover interactions
 * WHY THESE COMBINED ANIMATIONS WORK:
 * - Wiggle animation provides playful personality feedback
 * - translateY(-3px) creates subtle lift effect suggesting interactivity
 * - Both effects are small enough to not interfere with button text readability
 * - User-initiated timing (only on hover) respects user control
 */
.bounce-button:hover {
    animation: wiggle 0.5s ease-in-out;
    transform: translateY(-3px);
}

/* ✅ ANIMATION GOOD PRACTICE: Organic, multi-keyframe motion
 * WHY THIS FLOATING ANIMATION FEELS NATURAL:
 * - 3 keyframe stops create complex, non-mechanical movement path
 * - Small translateY values (-10px, -5px) are subtle and calming
 * - Tiny rotation (±1deg) adds organic imperfection that feels alive
 * - 3s duration is slow enough to feel peaceful, not urgent
 * - Returns smoothly to starting position for seamless loop
 */
@keyframes float {
    0%, 100% {
        transform: translateY(0px) rotate(0deg);
    }

    33% {
        transform: translateY(-10px) rotate(1deg);
    }

    66% {
        transform: translateY(-5px) rotate(-1deg);
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Complementary shadow animation
 * WHY THIS GLOW ANIMATION ENHANCES THE FLOAT:
 * - box-shadow animation doesn't trigger layout recalculation
 * - 2s timing differs from 3s float, creating complex combined motion
 * - rgba opacity changes (0.3 to 0.6) are subtle but noticeable
 * - Shadow values suggest changing light/elevation that matches floating
 * - Works harmoniously with float animation without competing
 */
@keyframes glow {
    0%, 100% {
        box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
    }

    50% {
        box-shadow: 0 10px 30px rgba(52, 152, 219, 0.6);
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Multiple coordinated animations
 * WHY COMBINING THESE ANIMATIONS WORKS:
 * - Both float and glow use different timing (3s vs 2s) creating complex motion
 * - Both are infinite loops appropriate for ambient/background effects
 * - Different timing prevents synchronization that would look mechanical
 * - Both use ease-in-out for natural, organic feeling
 */
.floating-element {
    width: 100px;
    height: 100px;
    background: linear-gradient(135deg, #3498db, #2980b9);
    border-radius: 20px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 2rem;
    animation: float 3s ease-in-out infinite, glow 2s ease-in-out infinite;
}

/* ✅ ANIMATION GOOD PRACTICE: Realistic typewriter simulation
 * WHY THIS WIDTH ANIMATION WORKS FOR TYPEWRITER EFFECT:
 * - Animating width from 0 to 100% simulates text being typed
 * - Works with overflow: hidden to reveal text progressively
 * - Width is normally expensive to animate, but here it's purposeful and temporary
 * - Creates authentic typewriter experience that users recognize
 */
@keyframes typewriter {
    0% {
        width: 0;
    }

    100% {
        width: 100%;
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Authentic cursor blinking
 * WHY THIS BORDER ANIMATION SIMULATES REAL CURSORS:
 * - border-color animation from transparent to solid mimics text cursor
 * - 1s duration matches typical cursor blink rate that users expect
 * - infinite loop appropriate for cursor behavior
 * - Simple two-state animation is computationally efficient
 */
@keyframes blink {
    0%, 100% {
        border-color: transparent;
    }

    50% {
        border-color: #333;
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Smooth entrance with dual properties
 * WHY COMBINING OPACITY AND TRANSFORM WORKS:
 * - Opacity fade-in prevents jarring appearance
 * - translateX movement adds directional entrance context
 * - -50px starting position is noticeable but not excessive
 * - Both properties are GPU-accelerated for smooth performance
 */
@keyframes slideInLeft {
    0% {
        opacity: 0;
        transform: translateX(-50px);
    }

    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Steps timing for character-by-character reveal
 * WHY THESE ANIMATION PROPERTIES CREATE REALISTIC TYPING:
 * - steps(20) creates discrete character-by-character reveal instead of smooth
 * - 3s total duration feels like realistic typing speed
 * - 1s delay allows page to load before typewriter starts
 * - forwards fill-mode maintains final state after animation
 * - Combines with blink animation for complete typewriter effect
 */
.typewriter-text {
    font-family: 'Courier New', monospace;
    font-size: 18px;
    color: #333;
    white-space: nowrap;
    overflow: hidden;
    border-right: 2px solid #333;
    width: 0;
    animation: typewriter 3s steps(20) 1s forwards, blink 1s infinite;
}

/* ✅ ANIMATION GOOD PRACTICE: Delayed entrance for content hierarchy
 * WHY THIS ANIMATION TIMING CREATES GOOD UX:
 * - 0.8s duration is quick enough to feel responsive
 * - 0.5s delay creates staggered reveal with other elements
 * - forwards fill-mode keeps element visible after animation
 * - ease-out timing feels natural (fast start, slow finish)
 * - Opacity start of 0 prevents flash of unstyled content
 */
.slide-text {
    color: #2c3e50;
    font-size: 20px;
    font-weight: 600;
    opacity: 0;
    animation: slideInLeft 0.8s ease-out 0.5s forwards;
}

@media (max-width: 768px) {
    .container {
        grid-template-columns: 1fr;
    }
}

/* ✅ ANIMATION EXCELLENT PRACTICE: Accessibility-first motion control
 * WHY THIS IS CRITICAL FOR GOOD ANIMATION PRACTICES:
 * - Respects user's explicit OS-level preference to reduce motion
 * - Prevents vestibular disorders, migraines, and motion sensitivity reactions
 * - Required for WCAG 2.1 Level AA accessibility compliance
 * - 0.01ms duration effectively disables animations while maintaining functionality
 * - iteration-count: 1 stops infinite loops that could cause problems
 * - !important ensures this override works regardless of specificity
 * - Shows professional responsibility for inclusive design
 */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
    }
}

/* ✅ ANIMATION GOOD PRACTICE: Consistent entrance pattern
 * WHY REUSING ANIMATIONS CREATES COHESIVE EXPERIENCE:
 * - Same slideInLeft animation creates visual consistency
 * - 1s duration matches other entrance animations for rhythm
 * - forwards fill-mode prevents element from disappearing
 * - ease-out timing matches user expectations for content reveals
 */
.main-title {
    text-align: center;
    color: white;
    font-size: 2.5rem;
    margin-bottom: 3rem;
    opacity: 0;
    animation: slideInLeft 1s ease-out forwards;
}

/*
 * KEY ANIMATION PRINCIPLES DEMONSTRATED:
 * 
 * 1. PERFORMANCE-FIRST ANIMATION:
 *    - Prioritize transform and opacity over layout properties
 *    - Use GPU acceleration for smooth 60fps animations
 *    - Keep animations simple and computationally lightweight
 * 
 * 2. PURPOSEFUL ANIMATION TIMING:
 *    - Entrance animations: 0.8-1s (substantial but not slow)
 *    - Hover feedback: 0.2-0.5s (immediate response)
 *    - Ambient effects: 2-3s (calm, non-urgent)
 *    - Loading indicators: 1s (visible progress)
 * 
 * 3. NATURAL ANIMATION EASING:
 *    - ease-out for entrances (fast start, slow finish)
 *    - ease-in-out for organic motion (smooth acceleration/deceleration)  
 *    - linear for mechanical motion (spinners, progress)
 *    - steps() for discrete reveals (typewriter effects)
 * 
 * 4. USER-RESPECTFUL ANIMATION:
 *    - Honor prefers-reduced-motion settings
 *    - Don't animate infinitely unless functionally necessary
 *    - Provide clear animation end states
 *    - Keep motion subtle enough to not distract from content
 * 
 * 5. SEMANTIC ANIMATION USAGE:
 *    - Entrance effects for content reveals
 *    - Hover effects for interaction feedback
 *    - Loading animations for system status
 *    - Ambient effects for visual interest without information
 */